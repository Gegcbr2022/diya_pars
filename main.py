
import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from telethon import TelegramClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8126215351:AAGOeoRejXzVOYk5n1R1BBOOevz4fbZHm9E" # üî¥ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_ID = "22027112"
API_HASH = "b5a2066fdf4618c019aa8e0ac7912b2c"

BASE_URL = "https://fakedocs.online/"
RESERVE_URL = "https://fakedocs.online/rezerv/"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon-–∫–ª–∏–µ–Ω—Ç (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID)
tg_client = TelegramClient('session', API_ID, API_HASH)

async def get_telegram_id(username):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ username –≤ Telegram ID"""
    async with tg_client:
        try:
            user = await tg_client.get_entity(username)
            return str(user.id)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –¥–ª—è {username}: {e}")
            return None

def check_user_folder(tg_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"""
    urls = [f"{BASE_URL}{tg_id}", f"{RESERVE_URL}{tg_id}"]
    results = []
    
    for url in urls:
        try:
            response = requests.head(url)
            if response.status_code != 404:
                results.append(url)
        except requests.RequestException as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")

    return results

async def process_user(username):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = username.strip().replace('@', '')
    tg_id = await get_telegram_id(f"@{username}")

    if not tg_id:
        return f"‚ùå *{username}* - _–Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ ID_"

    existing_folders = check_user_folder(tg_id)
    
    if existing_folders:
        text = f"‚úÖ *{username}* (ID: `{tg_id}`) –Ω–∞–π–¥–µ–Ω:\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

        for folder in existing_folders:
            text += f"üîó [{folder}]({folder})\n"
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å", url=folder)])

        return text, keyboard if keyboard.inline_keyboard else None  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏
    
    return f"‚ö†Ô∏è *{username}* (ID: `{tg_id}`) - _–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_", None


async def send_welcome(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("üëã *–ü—Ä–∏–≤–µ—Ç!*\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ username (–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç–æ–ª–±–∏–∫), –∏ —è –ø—Ä–æ–≤–µ—Ä—é –∏—Ö –Ω–∞–ª–∏—á–∏–µ.")

async def handle_usernames(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ username"""
    usernames = message.text.split("\n")  # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫

    tasks = [process_user(username) for username in usernames if username.strip()]
    results = await asyncio.gather(*tasks)  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

    for result in results:
        if isinstance(result, tuple):
            text, keyboard = result
            await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer(result, parse_mode="Markdown")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await tg_client.start()  # –ó–∞–ø—É—Å–∫ Telethon-–∫–ª–∏–µ–Ω—Ç–∞

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (aiogram 3.x)
    dp.message.register(send_welcome, Command("start", "help"))
    dp.message.register(handle_usernames)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
